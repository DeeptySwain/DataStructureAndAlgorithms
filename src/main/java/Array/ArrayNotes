1.  To findout 2D Array's column length/how many columns are present: arr[0].length;
2.  For Matrix related/2d array qus, writedown the matrix and then list down the matrix elemenet in terms of index.
1 2 3
4 5 6
7 8 9
Sum of diagonal:
for primary diagonal:
arr[0][0]
arr[1][1]
arr[2][2]

if you see the patern is arr[i][i]

For secondary diagonal:
arr[0][2]
arr[1][1]
arr[2][0]

if you see the patern is arr[i][n-1-i]

sum += arr[i][i] + arr[i][n-1-i];
for middle/intersect element: if length of matrix is even, mid is 0 (as for even case no intersect point comes;
 if matrix length is odd, mid[n/2][n/2];
 mid = n%2 ==0?0 : mid[n/2][n/2]

 3. For finding first and last best score or cases where you have to find the 1st largest and second largest or 3rd largest etc.
 first compare each value with firstLarge, then assign the 2nd bigger number to secondLarge and then the bigger number to firstLarge. Again compare with second large.
 while(i<nums.length){
             if(nums[i] > fLarge){
                 sLarge=fLarge;
                 fLarge=nums[i];
             }else if(nums[i]>sLarge && nums[i]!=fLarge){
                 sLarge=nums[i];
             }
             i++;
 4. For Missing Number cases you can simply use the formula for sum of n natural number, which is n*(n-1)/2.
 substract total sum of given array elements from this. you will get the missing number.

 5. remove duplicate elements in same array:
 The key idea here is that j always points to the position where the next unique element should be placed. By the end of the method, the first j elements of the array will contain all the unique elements from the original array, in their original order.
 This algorithm works because the input array is assumed to be sorted. In a sorted array, all occurrences of a number are grouped together, so by comparing each element with the previous one, we can identify all unique elements.
 The time complexity of this algorithm is O(n), where n is the length of the input array, as it makes a single pass through the array.
6. For finding the duplicate value:
you can take another boolean[]
7. For two sum problem we can use brute force i=0; j=i+1 or hashmap we can use